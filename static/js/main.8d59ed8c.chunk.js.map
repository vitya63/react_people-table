{"version":3,"sources":["api.js","components/Person.js","components/PeopleTable.js","components/SortButtons.js","App.js","index.js"],"names":["getPeople","fetch","then","response","json","Person","_ref","person","selectPerson","selectedPersonId","personClassName","concat","sex","century","id","react_default","a","createElement","className","onClick","born","name","died","age","mother","father","PeopleTable","people","map","components_Person","key","SortButtons","changeSortMethod","type","reformatPeopleList","createSelector","state","filterStr","toLowerCase","sortMethod","sortedPeople","Object","toConsumableArray","sort","b","localeCompare","sortPeople","filter","includes","filterPeople","App","e","personId","currentTarget","_this","setState","changeFilter","target","value","_this2","this","_objectSpread","Math","ceil","_this$state","finalPeopleList","Fragment","length","onChange","placeholder","components_SortButtons","components_PeopleTable","React","Component","ReactDOM","render","src_App","test","document","getElementById"],"mappings":"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","file":"static/js/main.8d59ed8c.chunk.js","sourcesContent":["const getPeople = () => (\n  fetch('https://mate-academy.github.io/react_people-table/api/people.json')\n    .then(response => response.json())\n);\n\nexport default getPeople;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Person.css';\n\nfunction Person({ person, selectPerson, selectedPersonId }) {\n  let personClassName = `\n    Person\n    ${person.sex === 'm' ? 'Person--male' : 'Person--female'}\n    Person--lived-in-${person.century}\n  `;\n\n  if (+selectedPersonId === person.id) {\n    personClassName += '  Person--selected';\n  }\n\n  return (\n    <tr className={personClassName} onClick={selectPerson} id={person.id}>\n      <td>{person.id}</td>\n      <td\n        className={person.born < 1650\n          ? 'born-before-1650'\n          : 'born-from-1650'}\n      >\n        {person.name}\n      </td>\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td\n        className={person.age >= 65 ? 'reached-65' : \"didn't-reach-65\"}\n      >\n        {person.age}\n      </td>\n      <td>{person.century}</td>\n      <td>{person.mother}</td>\n      <td>{person.father}</td>\n    </tr>\n  );\n}\n\nPerson.propTypes = {\n  person: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    sex: PropTypes.string,\n    born: PropTypes.number,\n    died: PropTypes.number,\n    age: PropTypes.number,\n    century: PropTypes.number,\n    mother: PropTypes.string,\n    father: PropTypes.string,\n  }).isRequired,\n  selectPerson: PropTypes.func.isRequired,\n  selectedPersonId: PropTypes.number.isRequired,\n};\n\nexport default Person;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PeopleTable.css';\nimport Person from './Person';\n\nfunction PeopleTable({ people, selectPerson, selectedPersonId }) {\n  return (\n    <table className=\"PeopleTable\">\n      <thead>\n        <tr>\n          <th>Id</th>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Age</th>\n          <th>Century</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n      <tbody>\n        {people.map(person => (\n          <Person\n            person={person}\n            key={person.id}\n            selectPerson={selectPerson}\n            selectedPersonId={selectedPersonId}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nPeopleTable.propTypes = {\n  people: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selectPerson: PropTypes.func.isRequired,\n  selectedPersonId: PropTypes.number.isRequired,\n};\n\nexport default PeopleTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SortButtons = ({ changeSortMethod }) => (\n  <div>\n    <button\n      type=\"button\"\n      onClick={() => changeSortMethod('by name')}\n    >\n      Sort by name\n    </button>\n    <button\n      type=\"button\"\n      onClick={() => changeSortMethod('by id')}\n    >\n      Sort by Id\n    </button>\n    <button\n      type=\"button\"\n      onClick={() => changeSortMethod('by sex')}\n    >\n      Sort by sex\n    </button>\n    <button\n      type=\"button\"\n      onClick={() => changeSortMethod('by birth year')}\n    >\n      Sort by birth year\n    </button>\n    <button\n      type=\"button\"\n      onClick={() => changeSortMethod('by year of death')}\n    >\n      Sort by year of death\n    </button>\n    <button\n      type=\"button\"\n      onClick={() => changeSortMethod('by age')}\n    >\n      Sort by age\n    </button>\n    <button\n      type=\"button\"\n      onClick={() => changeSortMethod('by century')}\n    >\n      Sort by century\n    </button>\n  </div>\n);\n\nSortButtons.propTypes = {\n  changeSortMethod: PropTypes.func.isRequired,\n};\n\nexport default SortButtons;\n","import React from 'react';\nimport { createSelector } from 'reselect';\nimport getPeople from './api';\nimport PeopleTable from './components/PeopleTable';\nimport SortButtons from './components/SortButtons';\n\nconst filterPeople = (people, filterStr) => (\n  people.filter(person => (\n    person.name.toLowerCase().includes(filterStr)\n      || (person.mother || '').toLowerCase().includes(filterStr)\n      || (person.father || '').toLowerCase().includes(filterStr)\n  ))\n);\n\nconst sortPeople = (people, sortMethod) => {\n  let sortedPeople = null;\n\n  switch (sortMethod) {\n    case 'by name':\n      sortedPeople = [...people]\n        .sort((a, b) => (\n          a.name.localeCompare(b.name)\n        ));\n      break;\n\n    case 'by id':\n      sortedPeople = [...people];\n      break;\n\n    case 'by sex':\n      sortedPeople = [...people]\n        .sort(a => (\n          a.sex === 'f' ? 1 : -1\n        ));\n      break;\n\n    case 'by birth year':\n      sortedPeople = [...people]\n        .sort((a, b) => (\n          a.born - b.born\n        ));\n      break;\n\n    case 'by year of death':\n      sortedPeople = [...people]\n        .sort((a, b) => (\n          a.died - b.died\n        ));\n      break;\n\n    case 'by age':\n      sortedPeople = [...people]\n        .sort((a, b) => (\n          a.age - b.age\n        ));\n      break;\n\n    case 'by century':\n      sortedPeople = [...people]\n        .sort((a, b) => (\n          a.century - b.century\n        ));\n      break;\n\n    default:\n  }\n\n  return sortedPeople;\n};\n\nconst reformatPeopleList = createSelector(\n  [\n    state => state.people,\n    state => state.filterStr.toLowerCase(),\n    state => state.sortMethod,\n  ],\n  (people, filterStr, sortMethod) => (\n    sortPeople(filterPeople(people, filterStr), sortMethod)\n  )\n);\n\nclass App extends React.Component {\n  state = {\n    people: [],\n    selectedPersonId: 0,\n    filterStr: '',\n    sortMethod: 'by id',\n  }\n\n  componentDidMount() {\n    getPeople()\n      .then((people) => {\n        let id = 0;\n\n        this.setState({\n          people: people.map((person) => {\n            id += 1;\n\n            return (\n              {\n                id,\n                ...person,\n                age: person.died - person.born,\n                century: Math.ceil(person.died / 100),\n              }\n            );\n          }),\n        });\n      });\n  }\n\n  selectPerson = (e) => {\n    const personId = e.currentTarget.id;\n\n    this.setState({\n      selectedPersonId: personId,\n    });\n  }\n\n  changeFilter = (e) => {\n    this.setState({\n      filterStr: e.target.value,\n    });\n  }\n\n  changeSortMethod = (sortMethod) => {\n    if (sortMethod !== this.state.sortMethod) {\n      this.setState({\n        sortMethod,\n      });\n    }\n  }\n\n  render() {\n    const { selectedPersonId, filterStr } = this.state;\n    const finalPeopleList = reformatPeopleList(this.state);\n\n    return (\n      <>\n        <h1>\n          <span>Number of people: </span>\n          {this.state.people.length}\n        </h1>\n        <input\n          type=\"text\"\n          value={filterStr}\n          onChange={this.changeFilter}\n          placeholder=\"Filter the people\"\n        />\n        <SortButtons changeSortMethod={this.changeSortMethod} />\n        <PeopleTable\n          people={finalPeopleList}\n          selectPerson={this.selectPerson}\n          selectedPersonId={selectedPersonId}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App test={123} />, document.getElementById('root'));\n"],"sourceRoot":""}